name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Build Project
        run: mvn clean package

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: CompetitionSystem
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be available..."
          for i in {1..30}; do
            nc -z localhost 5432 && echo "PostgreSQL is up!" && exit 0
            echo "Waiting for database..."
            sleep 2
          done
          echo "PostgreSQL did not start in time" && exit 1

      - name: Run Unit Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CompetitionSystem
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: 123
        run: mvn test

  sonar:
    name: SonarQube Scan + Gate
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Maven verify & Sonar scan (wait Gate)
        env:
          SONAR_TOKEN:     ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL:  ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=DevOps \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.qualitygate.wait=true

#  publish_images:
#    name: DockerHub publish images
#    runs-on: ubuntu-latest
##    needs: sonar
#    needs: test
#    steps:
#      - name: checkout
#        uses: actions/checkout@v4
#      - name: build image
#        run: docker build . -t sashalyapanov/spring-app-dev-ops:latest
#      - name: push image to docker hub
#        run: |
#          docker login -u sashalyapanov -p ${{ secrets.DOCKER_HUB_TOKEN }}
#          docker push sashalyapanov/spring-app-dev-ops:latest

  publish_images:
    name: DockerHub publish images
    runs-on: ubuntu-latest
    needs: test
    env:
      DOCKER_USER: sashalyapanov
    steps:
      - uses: actions/checkout@v4
      - id: vars
        run: echo "TAG=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Build image
        run: |
          docker build . \
            -t $DOCKER_USER/spring-app-dev-ops:latest \
            -t $DOCKER_USER/spring-app-dev-ops:${{ steps.vars.outputs.TAG }}

      - name: Push to DockerHub
        run: |
          docker login -u $DOCKER_USER -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push $DOCKER_USER/spring-app-dev-ops:latest
          docker push $DOCKER_USER/spring-app-dev-ops:${{ steps.vars.outputs.TAG }}

  deploy:
    name: Deploy to K8s
    runs-on: [self-hosted, k8s]
    needs: publish_images
    env:
      DOCKER_USER: sashalyapanov
      SHA: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with: { version: v1.30.0 }

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config

      - name: Substitute TAG and apply manifests
        run: |
          export TAG=${GITHUB_SHA::8}
          echo "Using TAG=$TAG"
#          IMG=$DOCKER_USER/spring-app-dev-ops:$TAG
          envsubst < k8s-deployment/deployment-spring-app.yaml | kubectl apply -f -
#          kubectl set image deployment/spring-app-dev-ops \
#            spring-app-dev-ops=$IMG --record
          
#          envsubst < k8s-deployment/deployment-spring-app.yaml | kubectl apply -f -

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/spring-app-dev-ops