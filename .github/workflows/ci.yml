name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Build Project
        run: mvn clean package

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: CompetitionSystem
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 123
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be available..."
          for i in {1..30}; do
            nc -z localhost 5432 && echo "PostgreSQL is up!" && exit 0
            echo "Waiting for database..."
            sleep 2
          done
          echo "PostgreSQL did not start in time" && exit 1

      - name: Run Unit Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/CompetitionSystem
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: 123
        run: mvn test

  sonar:
    name: SonarQube Scan + Gate
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Maven verify & Sonar scan (wait Gate)
        env:
          SONAR_TOKEN:     ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL:  ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn -B verify sonar:sonar \
            -Dsonar.projectKey=spring-app-dev-ops \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.qualitygate.wait=true

  publish_images:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: build image
        run: docker build . -t sashalyapanov/spring-app-dev-ops:latest
      - name: push image to docker hub
        run: |
          docker login -u sashalyapanov -p ${{ secrets.DOCKER_HUB_TOKEN }}
          docker push sashalyapanov/spring-app-dev-ops:latest